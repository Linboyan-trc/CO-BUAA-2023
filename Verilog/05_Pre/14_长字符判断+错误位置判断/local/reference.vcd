$date
	Thu Sep 21 08:24:51 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 2 ! format_type [1:0] $end
$var wire 32 " test_pc [31:0] $end
$var wire 16 # test_grf [15:0] $end
$var wire 32 $ test_addr [31:0] $end
$var wire 4 % error_code [3:0] $end
$var reg 8 & char [7:0] $end
$var reg 1 ' clk $end
$var reg 16 ( freq [15:0] $end
$var reg 1 ) reset $end
$scope module CPU_Checker_My $end
$var wire 1 * addr_legal $end
$var wire 8 + char [7:0] $end
$var wire 1 ' clk $end
$var wire 2 , format_type [1:0] $end
$var wire 16 - freq [15:0] $end
$var wire 1 . grf_legal $end
$var wire 1 / pc_legal $end
$var wire 1 ) reset $end
$var wire 32 0 test_addr [31:0] $end
$var wire 16 1 test_grf [15:0] $end
$var wire 32 2 test_pc [31:0] $end
$var wire 16 3 time_result [15:0] $end
$var wire 32 4 pc_result [31:0] $end
$var wire 16 5 grf_result [15:0] $end
$var wire 32 6 addr_result [31:0] $end
$var reg 2 7 cnt_up4 [1:0] $end
$var reg 3 8 cnt_up8 [2:0] $end
$var reg 4 9 error_code [3:0] $end
$var reg 5 : my_states [4:0] $end
$var integer 32 ; i [31:0] $end
$var integer 32 < pos01 [31:0] $end
$var integer 32 = pos02 [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
x/
x.
b100000000000 -
bx ,
bx +
x*
1)
b100000000000 (
0'
bx &
bx %
bx $
bx #
bx "
bx !
$end
#1
1.
b0 #
b0 1
b0 5
b0 3
1*
0/
b1010 =
b0 $
b0 0
b0 6
b0 "
b0 2
b0 4
b0 !
b0 ,
b1011 <
b0 %
b0 9
b0 7
b0 8
b0 :
b1000 ;
1'
#2
0'
b1011110 &
b1011110 +
0)
#3
b1 :
b1000 ;
1'
#4
0'
b110001 &
b110001 +
#5
b1010 =
b1111101000 3
b1 7
b10 :
1'
#6
0'
b110000 &
b110000 +
#7
b10 7
1'
#8
0'
b110010 &
b110010 +
#9
b1010 =
b1111111100 3
b11 7
1'
#10
0'
b110100 &
b110100 +
#11
b1010 =
b10000000000 3
b0 7
1'
#12
0'
b1000000 &
b1000000 +
#13
b11001 :
1'
#14
0'
b110000 &
b110000 +
#15
b11 :
b1 8
1'
#16
0'
#17
b10 8
1'
#18
0'
#19
b11 8
1'
#20
0'
#21
b100 8
1'
#22
0'
b110100 &
b110100 +
#23
1/
b100000000000000 "
b100000000000000 2
b100000000000000 4
b101 8
1'
#24
0'
b1100110 &
b1100110 +
#25
b100111100000000 "
b100111100000000 2
b100111100000000 4
b110 8
1'
#26
0'
#27
b100111111110000 "
b100111111110000 2
b100111111110000 4
b111 8
1'
#28
0'
b110000 &
b110000 +
#29
b0 8
1'
#30
0'
b111010 &
b111010 +
#31
b100 :
1'
#32
0'
b100000 &
b100000 +
#33
1'
#34
0'
b101010 &
b101010 +
#35
b11101 :
1'
#36
0'
b110000 &
b110000 +
#37
b1111 :
b1 8
1'
#38
0'
#39
b10 8
1'
#40
0'
#41
b11 8
1'
#42
0'
#43
b100 8
1'
#44
0'
#45
b101 8
1'
#46
0'
#47
b110 8
1'
#48
0'
#49
b111 8
1'
#50
0'
#51
b0 8
1'
#52
0'
b100000 &
b100000 +
#53
b10000 :
1'
#54
0'
b111100 &
b111100 +
#55
b10001 :
1'
#56
0'
b111101 &
b111101 +
#57
b10010 :
1'
#58
0'
b100000 &
b100000 +
#59
1'
#60
0'
b110000 &
b110000 +
#61
b10011 :
b1 8
1'
#62
0'
#63
b10 8
1'
#64
0'
#65
b11 8
1'
#66
0'
#67
b100 8
1'
#68
0'
#69
b101 8
1'
#70
0'
#71
b110 8
1'
#72
0'
#73
b111 8
1'
#74
0'
#75
b0 8
1'
#76
0'
b100011 &
b100011 +
#77
b1010 =
b10 !
b10 ,
b10100 :
1'
#78
0'
#79
b1010 =
b0 !
b0 ,
b0 :
1'
#80
0'
#81
0/
b0 "
b0 2
b0 4
b1010 =
b0 3
b1000 ;
1'
#82
0'
#83
b1000 ;
1'
#84
0'
#85
b1000 ;
1'
#86
0'
#87
b1000 ;
1'
#88
0'
#89
b1000 ;
1'
#90
0'
#91
b1000 ;
1'
#92
0'
#93
b1000 ;
1'
#94
0'
#95
b1000 ;
1'
#96
0'
#97
b1000 ;
1'
#98
0'
#99
b1000 ;
1'
#100
0'
#101
b1000 ;
1'
#102
0'
#103
b1000 ;
1'
#104
0'
#105
b1000 ;
1'
#106
0'
#107
b1000 ;
1'
#108
0'
#109
b1000 ;
1'
#110
0'
#111
b1000 ;
1'
#112
0'
#113
b1000 ;
1'
#114
0'
#115
b1000 ;
1'
#116
0'
#117
b1000 ;
1'
#118
0'
#119
b1000 ;
1'
#120
0'
#121
b1000 ;
1'
#122
0'
