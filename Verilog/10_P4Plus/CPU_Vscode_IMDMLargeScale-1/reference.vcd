$date
	Mon Nov 13 15:29:09 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module myMips $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$scope module myMipsDatapath $end
$var wire 32 # ALUInput_A [31:0] $end
$var wire 3 $ ALUInput_ALUOp [2:0] $end
$var wire 32 % ControllerInput_ins [31:0] $end
$var wire 32 & DMInput_A [31:0] $end
$var wire 32 ' DMInput_PC [31:0] $end
$var wire 32 ( DMInput_WD [31:0] $end
$var wire 1 ) DMInput_WE $end
$var wire 16 * EXTInput_imm [15:0] $end
$var wire 1 + EXTInput_zeroOrSigned $end
$var wire 5 , GRFInput_A1 [4:0] $end
$var wire 5 - GRFInput_A2 [4:0] $end
$var wire 32 . GRFInput_PC [31:0] $end
$var wire 1 / GRFInput_WE $end
$var wire 32 0 IMInput_PC [31:0] $end
$var wire 32 1 NPCInput_PC [31:0] $end
$var wire 16 2 NPCInput_imm [15:0] $end
$var wire 26 3 NPCInput_ins_index [25:0] $end
$var wire 1 4 NPCInput_isBranch $end
$var wire 1 5 NPCInput_isBranchSuccess $end
$var wire 1 6 NPCInput_isJal $end
$var wire 1 7 NPCInput_isJr $end
$var wire 32 8 NPCInput_rs [31:0] $end
$var wire 32 9 PCInput_NPC [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 5 : shamt [4:0] $end
$var wire 6 ; op [5:0] $end
$var wire 26 < ins_index [25:0] $end
$var wire 16 = imm [15:0] $end
$var wire 6 > func [5:0] $end
$var wire 5 ? Rt [4:0] $end
$var wire 5 @ Rs [4:0] $end
$var wire 5 A Rd [4:0] $end
$var wire 32 B PCOutput_PC [31:0] $end
$var wire 32 C NPCOutput_PC4 [31:0] $end
$var wire 32 D NPCOutput_NPC [31:0] $end
$var wire 32 E IMOutput_Ins [31:0] $end
$var wire 32 F GRFOutput_RD2 [31:0] $end
$var wire 32 G GRFOutput_RD1 [31:0] $end
$var wire 32 H GRFInput_WD [31:0] $end
$var wire 5 I GRFInput_A3 [4:0] $end
$var wire 32 J EXTOutput_immHasExted [31:0] $end
$var wire 32 K DMOutput_RD [31:0] $end
$var wire 1 L ControllerOutput_isJr_08 $end
$var wire 1 M ControllerOutput_isJal_10 $end
$var wire 1 N ControllerOutput_isBranch_09 $end
$var wire 1 O ControllerOutput_GRF_WE_02 $end
$var wire 2 P ControllerOutput_GRF_WD_03 [1:0] $end
$var wire 1 Q ControllerOutput_DM_WE_07 $end
$var wire 1 R ControllerOutput_ALU_immExt_05 $end
$var wire 3 S ControllerOutput_ALU_Op_06 [2:0] $end
$var wire 1 T ControllerOutput_ALU_B_04 $end
$var wire 2 U ControllerOutput_A3_RdRtRa_01 [1:0] $end
$var wire 1 V ALUOutput_isEqual $end
$var wire 32 W ALUOutput_C [31:0] $end
$var wire 32 X ALUInput_B [31:0] $end
$scope module myALU $end
$var wire 32 Y A [31:0] $end
$var wire 3 Z ALUOp [2:0] $end
$var wire 32 [ B [31:0] $end
$var wire 1 V isEqual $end
$var wire 32 \ C [31:0] $end
$upscope $end
$scope module myController $end
$var wire 1 ] add $end
$var wire 32 ^ ins [31:0] $end
$var wire 1 _ jr $end
$var wire 1 ` sub $end
$var wire 1 a xor_n $end
$var wire 1 b sw $end
$var wire 1 c ori $end
$var wire 6 d op [5:0] $end
$var wire 1 e nop $end
$var wire 1 f lw $end
$var wire 1 g lui $end
$var wire 1 h jal $end
$var wire 1 L isJr_08 $end
$var wire 1 M isJal_10 $end
$var wire 1 N isBranch_09 $end
$var wire 6 i func [5:0] $end
$var wire 1 j beq $end
$var wire 1 k R $end
$var wire 1 O GRF_WE_02 $end
$var wire 2 l GRF_WD_03 [1:0] $end
$var wire 1 Q DM_WE_07 $end
$var wire 1 R ALU_immExt_05 $end
$var wire 3 m ALU_Op_06 [2:0] $end
$var wire 1 T ALU_B_04 $end
$var wire 2 n A3_RdRtRa_01 [1:0] $end
$upscope $end
$scope module myDM $end
$var wire 32 o A [31:0] $end
$var wire 32 p PC [31:0] $end
$var wire 32 q RD [31:0] $end
$var wire 32 r WD [31:0] $end
$var wire 1 ) WE $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var integer 32 s i [31:0] $end
$upscope $end
$scope module myEXT $end
$var wire 16 t imm [15:0] $end
$var wire 1 + zeroOrSigned $end
$var wire 32 u immHasExted [31:0] $end
$upscope $end
$scope module myGRF $end
$var wire 5 v A1 [4:0] $end
$var wire 5 w A2 [4:0] $end
$var wire 5 x A3 [4:0] $end
$var wire 32 y PC [31:0] $end
$var wire 32 z RD1 [31:0] $end
$var wire 32 { RD2 [31:0] $end
$var wire 32 | WD [31:0] $end
$var wire 1 / WE $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var integer 32 } i [31:0] $end
$upscope $end
$scope module myIM $end
$var wire 32 ~ Ins [31:0] $end
$var wire 32 !" PC [31:0] $end
$var wire 32 "" tempPC [31:0] $end
$upscope $end
$scope module myNPC $end
$var wire 32 #" PC [31:0] $end
$var wire 16 $" imm [15:0] $end
$var wire 26 %" ins_index [25:0] $end
$var wire 1 4 isBranch $end
$var wire 1 5 isBranchSuccess $end
$var wire 1 6 isJal $end
$var wire 1 7 isJr $end
$var wire 32 &" rs [31:0] $end
$var wire 1 '" tempBranch $end
$var wire 32 (" PC4 [31:0] $end
$var wire 32 )" NPC [31:0] $end
$upscope $end
$scope module myPC $end
$var wire 32 *" NPC [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 32 +" PC [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11000000000000 +"
b11000000000100 *"
b11000000000100 )"
b11000000000100 ("
0'"
b0 &"
b11111111111111111 %"
b1111111111111111 $"
b11000000000000 #"
b0 ""
b11000000000000 !"
b110100000000011111111111111111 ~
b100000 }
b1111111111111111 |
b0 {
b0 z
b11000000000000 y
b1 x
b1 w
b0 v
b1111111111111111 u
b1111111111111111 t
b10000000000 s
b0 r
bx q
b11000000000000 p
b1111111111111111 o
b1 n
b11 m
b0 l
0k
0j
b111111 i
0h
0g
0f
0e
b1101 d
1c
0b
0a
0`
0_
b110100000000011111111111111111 ^
0]
b1111111111111111 \
b1111111111111111 [
b11 Z
b0 Y
b1111111111111111 X
b1111111111111111 W
0V
b1 U
1T
b11 S
0R
0Q
b0 P
1O
0N
0M
0L
bx K
b1111111111111111 J
b1 I
b1111111111111111 H
b0 G
b0 F
b110100000000011111111111111111 E
b11000000000100 D
b11000000000100 C
b11000000000000 B
b11111 A
b0 @
b1 ?
b111111 >
b1111111111111111 =
b11111111111111111 <
b1101 ;
b11111 :
b11000000000100 9
b0 8
07
06
05
04
b11111111111111111 3
b1111111111111111 2
b11000000000000 1
b11000000000000 0
1/
b11000000000000 .
b1 -
b0 ,
0+
b1111111111111111 *
0)
b0 (
b11000000000000 '
b1111111111111111 &
b110100000000011111111111111111 %
b11 $
b0 #
0"
0!
$end
#1
b11111111111111110000000000000000 H
b11111111111111110000000000000000 |
b0 K
b0 q
b11111111111111110000000000000000 &
b11111111111111110000000000000000 o
b11111111111111110000000000000000 W
b11111111111111110000000000000000 \
b100 $
b100 Z
b100 S
b100 m
b10 I
b10 x
b11000000001000 9
b11000000001000 *"
b11000000001000 D
b11000000001000 )"
b101111111111111111 3
b101111111111111111 %"
b101111111111111111 <
b10 -
b10 w
b10 ?
b1111 ;
0c
1g
b1111 d
b111100000000101111111111111111 %
b111100000000101111111111111111 ^
b111100000000101111111111111111 E
b111100000000101111111111111111 ~
b11000000000100 '
b11000000000100 p
b11000000000100 .
b11000000000100 y
b100 ""
b11000000000100 0
b11000000000100 !"
b11000000001000 C
b11000000001000 ("
b11000000000100 1
b11000000000100 #"
b11000000000100 B
b11000000000100 +"
b0 (
b0 r
b0 F
b0 {
1!
#2
0!
#3
b11111111111111111111111111111111 H
b11111111111111111111111111111111 |
bx K
bx q
b11111111111111111111111111111111 &
b11111111111111111111111111111111 o
b11111111111111111111111111111111 W
b11111111111111111111111111111111 \
b10 $
b10 Z
b10 S
b10 m
b1111111111111111 X
b1111111111111111 [
0T
b0 U
b0 n
b11 I
b11 x
b1100000100110 J
b1100000100110 u
1a
b11000000001100 9
b11000000001100 *"
b11000000001100 D
b11000000001100 )"
b10000010001100000100110 3
b10000010001100000100110 %"
b10000010001100000100110 <
b1100000100110 *
b1100000100110 t
b1100000100110 2
b1100000100110 $"
b1100000100110 =
b100110 >
b0 :
b11 A
b1 -
b1 w
b1 ?
b11111111111111110000000000000000 #
b11111111111111110000000000000000 Y
b11111111111111110000000000000000 8
b11111111111111110000000000000000 &"
b11111111111111110000000000000000 G
b11111111111111110000000000000000 z
b10 ,
b10 v
b10 @
b0 ;
1k
0g
b0 d
b100110 i
b10000010001100000100110 %
b10000010001100000100110 ^
b10000010001100000100110 E
b10000010001100000100110 ~
b1111111111111111 (
b1111111111111111 r
b1111111111111111 F
b1111111111111111 {
b11000000001000 '
b11000000001000 p
b11000000001000 .
b11000000001000 y
b1000 ""
b11000000001000 0
b11000000001000 !"
b11000000001100 C
b11000000001100 ("
b11000000001000 1
b11000000001000 #"
b11000000001000 B
b11000000001000 +"
1!
#4
0!
#5
x/
xO
bx H
bx |
bx &
bx o
bx W
bx \
x+
xR
x'"
xT
x7
xL
bx U
bx n
bx P
bx l
x5
xV
x)
xQ
bx $
bx Z
bx S
bx m
x4
xN
x6
xM
bx J
bx u
bx I
bx x
bx X
bx [
x]
x`
x_
xa
bx 9
bx *"
bx D
bx )"
bx 3
bx %"
bx <
bx *
bx t
bx 2
bx $"
bx =
bx >
bx :
bx A
bx (
bx r
bx F
bx {
bx -
bx w
bx ?
bx #
bx Y
bx 8
bx &"
bx G
bx z
bx ,
bx v
bx @
bx ;
xk
xc
xf
xb
xj
xg
xh
bx d
bx i
xe
bx %
bx ^
bx E
bx ~
b11000000001100 '
b11000000001100 p
b11000000001100 .
b11000000001100 y
b1100 ""
b11000000001100 0
b11000000001100 !"
b11000000010000 C
b11000000010000 ("
b11000000001100 1
b11000000001100 #"
b11000000001100 B
b11000000001100 +"
1!
#6
0!
#7
bx '
bx p
bx .
bx y
bx ""
bx 0
bx !"
bx C
bx ("
bx 1
bx #"
bx B
bx +"
1!
#8
0!
#9
1!
#10
0!
#11
1!
#12
0!
#13
1!
#14
0!
#15
1!
#16
0!
#17
1!
#18
0!
#19
1!
#20
0!
#21
1!
#22
0!
1"
#23
b1111111111111111 H
b1111111111111111 |
b1111111111111111 &
b1111111111111111 o
b1111111111111111 W
b1111111111111111 \
05
0V
1/
1O
b1111111111111111 X
b1111111111111111 [
1T
b1 I
b1 x
0+
0R
0'"
b1 U
b1 n
b11000000000100 9
b11000000000100 *"
b11000000000100 D
b11000000000100 )"
b11 $
b11 Z
b11 S
b11 m
07
0L
b0 P
b0 l
0)
0Q
04
0N
06
0M
b1111111111111111 J
b1111111111111111 u
0]
0`
0_
0a
b11111111111111111 3
b11111111111111111 %"
b11111111111111111 <
b1111111111111111 *
b1111111111111111 t
b1111111111111111 2
b1111111111111111 $"
b1111111111111111 =
b111111 >
b11111 :
b11111 A
b0 (
b0 r
b0 F
b0 {
b1 -
b1 w
b1 ?
b0 #
b0 Y
b0 8
b0 &"
b0 G
b0 z
b0 ,
b0 v
b0 @
b1101 ;
0k
1c
0f
0b
0j
0g
0h
b1101 d
b111111 i
0e
b110100000000011111111111111111 %
b110100000000011111111111111111 ^
b110100000000011111111111111111 E
b110100000000011111111111111111 ~
b11000000000000 '
b11000000000000 p
b11000000000000 .
b11000000000000 y
b0 ""
b11000000000000 0
b11000000000000 !"
b11000000000100 C
b11000000000100 ("
b11000000000000 1
b11000000000000 #"
b11000000000000 B
b11000000000000 +"
b10000000000 s
b100000 }
1!
#24
0!
0"
#25
b11111111111111110000000000000000 H
b11111111111111110000000000000000 |
b0 K
b0 q
b11111111111111110000000000000000 &
b11111111111111110000000000000000 o
b11111111111111110000000000000000 W
b11111111111111110000000000000000 \
b100 $
b100 Z
b100 S
b100 m
b10 I
b10 x
b11000000001000 9
b11000000001000 *"
b11000000001000 D
b11000000001000 )"
b101111111111111111 3
b101111111111111111 %"
b101111111111111111 <
b10 -
b10 w
b10 ?
b1111 ;
0c
1g
b1111 d
b111100000000101111111111111111 %
b111100000000101111111111111111 ^
b111100000000101111111111111111 E
b111100000000101111111111111111 ~
b11000000000100 '
b11000000000100 p
b11000000000100 .
b11000000000100 y
b100 ""
b11000000000100 0
b11000000000100 !"
b11000000001000 C
b11000000001000 ("
b11000000000100 1
b11000000000100 #"
b11000000000100 B
b11000000000100 +"
b0 (
b0 r
b0 F
b0 {
1!
#26
0!
#27
b11111111111111111111111111111111 H
b11111111111111111111111111111111 |
bx K
bx q
b11111111111111111111111111111111 &
b11111111111111111111111111111111 o
b11111111111111111111111111111111 W
b11111111111111111111111111111111 \
b10 $
b10 Z
b10 S
b10 m
b1111111111111111 X
b1111111111111111 [
0T
b0 U
b0 n
b11 I
b11 x
b1100000100110 J
b1100000100110 u
1a
b11000000001100 9
b11000000001100 *"
b11000000001100 D
b11000000001100 )"
b10000010001100000100110 3
b10000010001100000100110 %"
b10000010001100000100110 <
b1100000100110 *
b1100000100110 t
b1100000100110 2
b1100000100110 $"
b1100000100110 =
b100110 >
b0 :
b11 A
b1 -
b1 w
b1 ?
b11111111111111110000000000000000 #
b11111111111111110000000000000000 Y
b11111111111111110000000000000000 8
b11111111111111110000000000000000 &"
b11111111111111110000000000000000 G
b11111111111111110000000000000000 z
b10 ,
b10 v
b10 @
b0 ;
1k
0g
b0 d
b100110 i
b10000010001100000100110 %
b10000010001100000100110 ^
b10000010001100000100110 E
b10000010001100000100110 ~
b1111111111111111 (
b1111111111111111 r
b1111111111111111 F
b1111111111111111 {
b11000000001000 '
b11000000001000 p
b11000000001000 .
b11000000001000 y
b1000 ""
b11000000001000 0
b11000000001000 !"
b11000000001100 C
b11000000001100 ("
b11000000001000 1
b11000000001000 #"
b11000000001000 B
b11000000001000 +"
1!
#28
0!
#29
x/
xO
bx H
bx |
bx &
bx o
bx W
bx \
x+
xR
x'"
xT
x7
xL
bx U
bx n
bx P
bx l
x5
xV
x)
xQ
bx $
bx Z
bx S
bx m
x4
xN
x6
xM
bx J
bx u
bx I
bx x
bx X
bx [
x]
x`
x_
xa
bx 9
bx *"
bx D
bx )"
bx 3
bx %"
bx <
bx *
bx t
bx 2
bx $"
bx =
bx >
bx :
bx A
bx (
bx r
bx F
bx {
bx -
bx w
bx ?
bx #
bx Y
bx 8
bx &"
bx G
bx z
bx ,
bx v
bx @
bx ;
xk
xc
xf
xb
xj
xg
xh
bx d
bx i
xe
bx %
bx ^
bx E
bx ~
b11000000001100 '
b11000000001100 p
b11000000001100 .
b11000000001100 y
b1100 ""
b11000000001100 0
b11000000001100 !"
b11000000010000 C
b11000000010000 ("
b11000000001100 1
b11000000001100 #"
b11000000001100 B
b11000000001100 +"
1!
#30
0!
#31
bx '
bx p
bx .
bx y
bx ""
bx 0
bx !"
bx C
bx ("
bx 1
bx #"
bx B
bx +"
1!
#32
0!
#33
1!
#34
0!
#35
1!
#36
0!
#37
1!
#38
0!
#39
1!
#40
0!
#41
1!
#42
0!
#43
1!
#44
0!
#45
1!
#46
0!
#47
1!
#48
0!
#49
1!
#50
0!
#51
1!
#52
0!
#53
1!
#54
0!
#55
1!
#56
0!
#57
1!
#58
0!
#59
1!
#60
0!
#61
1!
#62
0!
#63
1!
#64
0!
#65
1!
#66
0!
#67
1!
#68
0!
#69
1!
#70
0!
#71
1!
#72
0!
#73
1!
#74
0!
#75
1!
#76
0!
#77
1!
#78
0!
#79
1!
#80
0!
#81
1!
#82
0!
#83
1!
#84
0!
#85
1!
#86
0!
#87
1!
#88
0!
#89
1!
#90
0!
#91
1!
#92
0!
#93
1!
#94
0!
#95
1!
#96
0!
#97
1!
#98
0!
#99
1!
#100
0!
#101
1!
#102
0!
#103
1!
#104
0!
#105
1!
#106
0!
#107
1!
#108
0!
#109
1!
#110
0!
#111
1!
#112
0!
#113
1!
#114
0!
#115
1!
#116
0!
#117
1!
#118
0!
#119
1!
#120
0!
#121
1!
#122
0!
#123
1!
#124
0!
#125
1!
#126
0!
#127
1!
#128
0!
#129
1!
#130
0!
#131
1!
#132
0!
#133
1!
#134
0!
#135
1!
#136
0!
#137
1!
#138
0!
#139
1!
#140
0!
#141
1!
#142
0!
#143
1!
#144
0!
#145
1!
#146
0!
#147
1!
#148
0!
#149
1!
#150
0!
#151
1!
#152
0!
#153
1!
#154
0!
#155
1!
#156
0!
#157
1!
#158
0!
#159
1!
#160
0!
#161
1!
#162
0!
#163
1!
#164
0!
#165
1!
#166
0!
#167
1!
#168
0!
#169
1!
#170
0!
#171
1!
#172
0!
#173
1!
#174
0!
#175
1!
#176
0!
#177
1!
#178
0!
#179
1!
#180
0!
#181
1!
#182
0!
#183
1!
#184
0!
#185
1!
#186
0!
#187
1!
#188
0!
#189
1!
#190
0!
#191
1!
#192
0!
#193
1!
#194
0!
#195
1!
#196
0!
#197
1!
#198
0!
#199
1!
#200
0!
